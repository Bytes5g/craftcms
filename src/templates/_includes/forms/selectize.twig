{% set id = id ?? "selectize#{random()}" %}
{% set selectizeOptions = {
    dropdownParent: 'body',
}|merge(selectizeOptions ?? []) %}

{% set multi = multi ?? false %}
{% if multi %}
    {% set selectizeOptions = selectizeOptions|merge({
        plugins: (selectizeOptions.plugins ?? [])|push('remove_button')
    }) %}
{% else %}
    {% set selectizeOptions = selectizeOptions|merge({
        plugins: (selectizeOptions.plugins ?? [])|push('select_on_focus')
    }) %}
{% endif %}

{# Normalize the options #}
{% set options = (options ?? [])|map((o, k) => (o.optgroup is defined or o.value is defined) ? o : {
    value: k,
    label: o.label is defined ? o.label : o,
}) %}

{% if includeEnvVars ?? false %}
    {% if allowedEnvValues is not defined %}
        {% set allowedEnvValues = options|filter(o => o.optgroup is not defined)|map(o => o.value) %}
    {% endif %}
    {% set options = options|map(o => o.data.data.hint is defined ? o : o|merge({
        data: {
            data: {
                hint: o.value,
            }
        },
    }, recursive=true)) %}
{% endif %}

{% if addOptionFn is defined and addOptionLabel is defined %}
    {% if options is empty %}
        {% set selectizeOptions = selectizeOptions|merge({
            allowEmptyOption: true,
        }) %}
        {% set options = [
            {value: '', label: ' '},
        ] %}
    {% endif %}
    {% set options = options|merge([
        {
            label: addOptionLabel ,
            value: '__add__',
            data: {
                data: {
                    addOption: true,
                },
            },
        },
    ]) %}
{% endif %}

{% if includeEnvVars ?? false %}
    {% set options = options|merge(craft.cp.getEnvOptions(allowedEnvValues)) %}
{% endif %}

{% include (multi ? '_includes/forms/multiselect.twig' : '_includes/forms/select.twig') with {
    class: (class ?? [])|explodeClass|push('selectize')|unique,
    inputAttributes: {
        style: {display: 'none'},
    },
} %}

{% js %}
(() => {
    const label = (data, showHint) => {
        let label = '';
        if (data.addOption) {
            label += '<span class="icon add"></span> ';
        }
        const status = (() => {
            if (typeof data.status !== 'undefined') {
                return data.status;
            }
            if (typeof data.boolean !== 'undefined') {
                return data.boolean ? 'green' : 'white';
            }
            return null;
        })();
        if (status) {
            label += `<span class="status ${status}"></span>`;
        }
        label += `<span>${Craft.escapeHtml(data.text)}</span>`;
        if (showHint && typeof data.hint === 'string' && data.hint !== '') {
            const langAttr = data.hintLang ? ` lang="${data.hintLang}"` : '';
            label += `<span class="light"${langAttr}>– ${Craft.escapeHtml(data.hint)}</span>`;
        }
        return `<div class="flex flex-nowrap">${label}</div>`;
    };

    const $select = $("#{{ id|namespaceInputId|e('js') }}");

    const onChange = () => {
        const selectize = $select.data('selectize');
        const $items = selectize.$wrapper.find('.item');
        const isSelect = $select.is('select');

        for (let i = 0; i < $items.length; i++) {
            const $item = $items.eq(i);

            if (isSelect) {
                const boolean = $item.data('boolean');
                if (typeof boolean !== 'undefined') {
                    $select.data('boolean', !!boolean);
                } else {
                    $select.removeData('boolean');
                }
            }

            {% if addOptionFn is defined and addOptionLabel is defined %}
            if ($item.data('add-option')) {
                if (isSelect) {
                    selectize.setValue('', true);
                } else {
                    selectize.removeItem('__add__');
                }

                selectize.close();
                selectize.blur();

                ({{ addOptionFn|raw }})(item => {
                    selectize.addOption(item);

                    // Remove the “Create” option and re-place it at the end
                    selectize.removeOption('__add__', true);
                    selectize.addOption({
                        text: {{ addOptionLabel|json_encode|raw }} ,
                        value: '__add__',
                        addOption: true,
                        hint: null,
                    });

                    selectize.refreshOptions(false);

                    if (isSelect) {
                        selectize.setValue(item.value, true);
                    } else {
                        selectize.addItem(item.value, true);
                    }
                }, selectize);
            }
            {% endif %}
        }
    }

    $select.selectize($.extend({
        searchField: ['text', 'hint', 'value', 'keywords'],
        render: {
            option: data => {
                const classes = ['option'];
                if (data.value === '') {
                    classes.push('selectize-dropdown-emptyoptionlabel');
                }
                return `<div class="${classes.join(' ')}">${label(data, true)}</div>`;
            },
            item: data => {
                const attrs = ['class="item"'];
                if (typeof data.boolean !== 'undefined') {
                    attrs.push(`data-boolean="${data.boolean ? '1' : ''}"`);
                }
                if (typeof data.addOption !== 'undefined') {
                    attrs.push('data-add-option="1"');
                }
                return `<div ${attrs.join(' ')}>${label(data, false)}</div>`;
            },
        },
        onChange: onChange,
        onInitialize: function () {
            // Copy all ARIA attributes from initial select to selectize
            [...$select[0].attributes]
                .filter(attr => /^aria-/.test(attr.name))
                .forEach((attr) => {
                    this.$control_input.attr(attr.name, attr.value);
                });
        },
        onDropdownOpen: function() {
            // adjust dropdown position - if there's not enough space to display it below the field
            // display it above the field
            const bodyHeight = $('body').height();
            const windowInnerHeight = window.innerHeight;
            let offsetAdjustment = 0;
            if (bodyHeight > windowInnerHeight) {
                offsetAdjustment = bodyHeight - windowInnerHeight;
            }

            const controlOffset = this.settings.dropdownParent === 'body' ? this.$control.offset() : this.$control.position();
            const controlHeight = this.$control.outerHeight();
            const dropdownHeight = this.$dropdown.outerHeight();
            const exceededWindowHeight = (controlOffset.top - offsetAdjustment + controlHeight + dropdownHeight) > windowInnerHeight;

            if (exceededWindowHeight) {
                this.$dropdown.css({
                    top: controlOffset.top - dropdownHeight - 4,
                });
            }
        },
        onDropdownClose: function() {
            $select.trigger('change');
        },
    }, {{ selectizeOptions|json_encode|raw }}));

    onChange();
})()
{% endjs %}
